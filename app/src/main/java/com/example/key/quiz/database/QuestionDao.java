package com.example.key.quiz.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CommunicationId = new Property(1, long.class, "communicationId", false, "COMMUNICATION_ID");
        public final static Property Type = new Property(2, long.class, "type", false, "TYPE");
        public final static Property Questions = new Property(3, String.class, "questions", false, "QUESTIONS");
        public final static Property RightAnswerId = new Property(4, long.class, "rightAnswerId", false, "RIGHT_ANSWER_ID");
    }

    private DaoSession daoSession;


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"COMMUNICATION_ID\" INTEGER NOT NULL UNIQUE ," + // 1: communicationId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"QUESTIONS\" TEXT NOT NULL ," + // 3: questions
                "\"RIGHT_ANSWER_ID\" INTEGER NOT NULL );"); // 4: rightAnswerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCommunicationId());
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getQuestions());
        stmt.bindLong(5, entity.getRightAnswerId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCommunicationId());
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getQuestions());
        stmt.bindLong(5, entity.getRightAnswerId());
    }

    @Override
    protected final void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // communicationId
            cursor.getLong(offset + 2), // type
            cursor.getString(offset + 3), // questions
            cursor.getLong(offset + 4) // rightAnswerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCommunicationId(cursor.getLong(offset + 1));
        entity.setType(cursor.getLong(offset + 2));
        entity.setQuestions(cursor.getString(offset + 3));
        entity.setRightAnswerId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
