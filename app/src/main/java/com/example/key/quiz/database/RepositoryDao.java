package com.example.key.quiz.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPOSITORY".
*/
public class RepositoryDao extends AbstractDao<Repository, Long> {

    public static final String TABLENAME = "REPOSITORY";

    /**
     * Properties of entity Repository.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property UserRemoteId = new Property(2, Long.class, "userRemoteId", false, "USER_REMOTE_ID");
    }

    private DaoSession daoSession;

    private Query<Repository> question_RepositoriesQuery;

    public RepositoryDao(DaoConfig config) {
        super(config);
    }
    
    public RepositoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPOSITORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ANSWER\" TEXT NOT NULL ," + // 1: answer
                "\"USER_REMOTE_ID\" INTEGER NOT NULL );"); // 2: userRemoteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPOSITORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Repository entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAnswer());
        stmt.bindLong(3, entity.getUserRemoteId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Repository entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAnswer());
        stmt.bindLong(3, entity.getUserRemoteId());
    }

    @Override
    protected final void attachEntity(Repository entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Repository readEntity(Cursor cursor, int offset) {
        Repository entity = new Repository( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // answer
            cursor.getLong(offset + 2) // userRemoteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Repository entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnswer(cursor.getString(offset + 1));
        entity.setUserRemoteId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Repository entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Repository entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Repository entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "repositories" to-many relationship of Question. */
    public List<Repository> _queryQuestion_Repositories(Long userRemoteId) {
        synchronized (this) {
            if (question_RepositoriesQuery == null) {
                QueryBuilder<Repository> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserRemoteId.eq(null));
                question_RepositoriesQuery = queryBuilder.build();
            }
        }
        Query<Repository> query = question_RepositoriesQuery.forCurrentThread();
        query.setParameter(0, userRemoteId);
        return query.list();
    }

}
