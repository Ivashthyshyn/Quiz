package com.example.key.quiz.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_SUCCESS".
*/
public class UserSuccessDao extends AbstractDao<UserSuccess, Long> {

    public static final String TABLENAME = "USER_SUCCESS";

    /**
     * Properties of entity UserSuccess.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserQuestionId = new Property(2, Long.class, "userQuestionId", false, "USER_QUESTION_ID");
        public final static Property UserAnswer = new Property(3, String.class, "userAnswer", false, "USER_ANSWER");
        public final static Property DateAnswer = new Property(4, Long.class, "dateAnswer", false, "DATE_ANSWER");
    }

    private DaoSession daoSession;

    private Query<UserSuccess> question_UserAnswersQuery;

    public UserSuccessDao(DaoConfig config) {
        super(config);
    }
    
    public UserSuccessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_SUCCESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: userName
                "\"USER_QUESTION_ID\" INTEGER NOT NULL ," + // 2: userQuestionId
                "\"USER_ANSWER\" TEXT NOT NULL ," + // 3: userAnswer
                "\"DATE_ANSWER\" INTEGER NOT NULL );"); // 4: dateAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_SUCCESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserSuccess entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindLong(3, entity.getUserQuestionId());
        stmt.bindString(4, entity.getUserAnswer());
        stmt.bindLong(5, entity.getDateAnswer());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserSuccess entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindLong(3, entity.getUserQuestionId());
        stmt.bindString(4, entity.getUserAnswer());
        stmt.bindLong(5, entity.getDateAnswer());
    }

    @Override
    protected final void attachEntity(UserSuccess entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserSuccess readEntity(Cursor cursor, int offset) {
        UserSuccess entity = new UserSuccess( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userName
            cursor.getLong(offset + 2), // userQuestionId
            cursor.getString(offset + 3), // userAnswer
            cursor.getLong(offset + 4) // dateAnswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserSuccess entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setUserQuestionId(cursor.getLong(offset + 2));
        entity.setUserAnswer(cursor.getString(offset + 3));
        entity.setDateAnswer(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserSuccess entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserSuccess entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserSuccess entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userAnswers" to-many relationship of Question. */
    public List<UserSuccess> _queryQuestion_UserAnswers(Long userQuestionId) {
        synchronized (this) {
            if (question_UserAnswersQuery == null) {
                QueryBuilder<UserSuccess> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserQuestionId.eq(null));
                question_UserAnswersQuery = queryBuilder.build();
            }
        }
        Query<UserSuccess> query = question_UserAnswersQuery.forCurrentThread();
        query.setParameter(0, userQuestionId);
        return query.list();
    }

}
